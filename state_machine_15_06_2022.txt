#include <AccelStepper.h>
#include <Servo.h>

void findPlace();
void placeCard();
void error();
void takeCard_moveDown();
void takeCard_sucktion();
void takeCard_lift();

const int stepX = 2;
const int dirX = 5;
const int stepY = 3;
const int dirY = 6;
const int stepZ = 4;
const int dirZ = 7;
const int stepA = 12;
const int dirA = 13;

int endstop_sucktion_sensor = 48;   
int endstop_bottom_sensor = 50;    
int endstop_top_sensor = 52;         

bool check = false;
String terminal;
int machine_state = 2;
int main_state = 1;
int takeCard_state = 1;
int dropCard_state = 1;

float discPositionSteps[7] = {87.5, 175, 262.5, 350, -262.5, -175, -87.5};
String currentPlacement[2] = {"0", "0"};

String userInput;
String pickUpPlacement[2] = {"0", "0"};
String destination[2] = {"0", "0"};

#define handSwitch 5
Servo servo;
int pos = 0;
bool cardLifted = false;
bool movementDone = true;

AccelStepper stepperX_TOP(AccelStepper::DRIVER, stepX, dirX); // Defaults to AccelStepper::FULL4WIRE    // Define a stepper and the pins it will use
AccelStepper stepperY_MIDDLE(AccelStepper::DRIVER, stepY, dirY); // Defaults to AccelStepper::FULL4WIRE 
AccelStepper stepperZ_BOTTOM(AccelStepper::DRIVER, stepZ, dirZ); // Defaults to AccelStepper::FULL4WIRE 
AccelStepper stepperA_SUCKTION(AccelStepper::DRIVER, stepA, dirA); // Defaults to AccelStepper::FULL4WIRE 
 
void setup()
{  
/*
  stepperX_TOP.setMaxSpeed(0);             // used by run() - motor accelerates up to this value
  stepperX_TOP.setAcceleration(0);             
  stepperX_TOP.setCurrentPosition(0);        // Resets current position of motor to 0 position (also sets motor speed to 0) 

  stepperY_MIDDLE.setMaxSpeed(0);             // used by run() - motor accelerates up to this value
  stepperY_MIDDLE.setAcceleration(0);             
  stepperY_MIDDLE.setCurrentPosition(0);        // Resets current position of motor to 0 position (also sets motor speed to 0) 
*/
  stepperZ_BOTTOM.setMaxSpeed(400);             // used by run() - motor accelerates up to this value
  stepperZ_BOTTOM.setAcceleration(800);             
  stepperZ_BOTTOM.setCurrentPosition(0);        // Resets current position of motor to 0 position (also sets motor speed to 0) 

  stepperA_SUCKTION.setMaxSpeed(900);             // used by run() - motor accelerates up to this value
  stepperA_SUCKTION.setAcceleration(1500);             
  stepperA_SUCKTION.setCurrentPosition(0);        // Resets current position of motor to 0 position (also sets motor speed to 0) 
  
  pinMode(endstop_bottom_sensor, INPUT);
  pinMode(endstop_top_sensor, INPUT);
  pinMode(endstop_sucktion_sensor, INPUT);

  pinMode(handSwitch, INPUT_PULLUP);
  servo.attach(46);
  servo.write(0);
  
  Serial.begin(115200);
}

void loop() {
 
  machine_state_machine();
 
}

void machine_state_machine() {

  switch(machine_state) {

  case 1: // INITIALIZE MACHINE
  break;
  case 2: // RUN MACHINE
  
  if (movementDone == true) {
    userInputMovement();
    movementDone = false;
  }
  
  move_state_machine();
  break;
  
  case 3: // STOP MACHINE
  break;

    
  }
  
}

void move_state_machine() {
  switch(main_state)      // STATES: FIND CARD, TAKE CARD, FIND PLACE, PLACE CARD, ERROR
  {
    case 1:          
      Serial.println("STATE 1: FIND CARD");
     
      motorChangePosition(calculateChangePosition(pickUpPlacement));
      
      main_state = 2;
      break;     
    case 2:          
      if (takeCard_state == 1) {
        Serial.println("STATE 2: TAKE CARD");
      }
      takeCard_state_machine();
      
      break;
    case 3:          
      Serial.println("STATE 3: FIND PLACE");
      
      motorChangePosition(calculateChangePosition(destination));

      main_state = 4;
      break;       
    case 4:
      if (dropCard_state == 1) {          
        Serial.println("STATE 4: PLACE CARD");
      }
      dropCard_state_machine();

      break;
    case 5:          
      Serial.println("STATE 5: ERROR");
      break;
  }
}

void userInputMovement() {
    
    Serial.print("Current Placement: ");
    for (int i = 0; i < 2; i++) {
      Serial.println(currentPlacement[i]);
    }
    
    Serial.println("Please choose [Pick-up DISC Placement]");
    while (Serial.available() == 0) {}         
    userInput = Serial.readString(); 
    Serial.print("Input: ");
    Serial.println(userInput); 
    pickUpPlacement[0] = userInput;
    userInput = "";

    Serial.println("Please choose [Pick-up SLOT Placement]");
    while (Serial.available() == 0) {}         
    userInput = Serial.readString(); 
    Serial.print("Input: ");
    Serial.println(userInput); 
    pickUpPlacement[1] = userInput;
    userInput = "";

    Serial.println("Please choose [DISC Destination]");
    while (Serial.available() == 0) {}         
    userInput = Serial.readString();
    Serial.print("Input: ");
    Serial.println(userInput);  
    destination[0] = userInput;
    userInput = "";

    Serial.println("Please choose [SLOT Destination]");
    while (Serial.available() == 0) {}         
    userInput = Serial.readString();
    Serial.print("Input: ");
    Serial.println(userInput);  
    destination[1] = userInput;
    userInput = "";
}

void takeCard_state_machine() {
  
  switch(takeCard_state)      
  {
    case 1:        // MOVE DOWN NO CARD
      Serial.println("\tTake_Card sub-state 1: MOVE DOWN"); 
      takeCard_moveDownNOCARD();      
      break;
    case 2:        // SUCKTION 
      Serial.println("\tTake_Card sub-state 2: SUCKTION");   
      takeCard_sucktion(); 
      takeCard_state = 3;  
      break;
    case 3:        // LIFT   
      Serial.println("\tTake_Card sub-state 3: LIFT"); 
      takeCard_liftWITHCARD();     
      takeCard_state = 1;  
      main_state = 3;
      break; 
  }
}

void dropCard_state_machine() {

 switch(dropCard_state) {
        
    case 1:       // MOVE DOWN WITH CARD
      Serial.println("\tDrop_Card sub-state 1: MOVE DOWN WITH CARD"); 
      dropCard_moveDownWITHCARD();
      dropCard_state = 2;
      break;

    case 2:       // NO SUCKTION
      Serial.println("\tDrop_Card sub-state 2: NO SUCKTION"); 
      dropCard_releaseSucktion();
      dropCard_state = 3;
      break;

    case 3:       // MOVE UP
      Serial.println("\tDrop_Card sub-state 3: MOVE UP"); 
      dropCard_liftNOCARD();
      dropCard_state = 1;
      main_state = 1;
      movementDone = true;
      break;
  }

  
}

void findPlace() {}

void placeCard() {}

void error() {}

void takeCard_moveDownNOCARD() {
  Serial.println("\t\tMoves down no Card");
  stepperA_SUCKTION.move(-1000);
  while (stepperA_SUCKTION.currentPosition() != -1000) {
      stepperA_SUCKTION.run();
      if (digitalRead(endstop_bottom_sensor) == LOW) {
            Serial.println("\t\t\tSENSOR: bottom sensor activated");
            while(1) {}
        }
      else if (digitalRead(endstop_sucktion_sensor) == LOW) {
            Serial.println("\t\t\tSENSOR: sucktion sensor activated");
            takeCard_state = 2;
            break;      
        } 
      }
      stepperA_SUCKTION.setCurrentPosition(0);
    }

void dropCard_moveDownWITHCARD() {
  Serial.println("\t\tMoves down with Card");
  stepperA_SUCKTION.move(-400);
  while (stepperA_SUCKTION.currentPosition() != -400) {
      stepperA_SUCKTION.run();
      if (digitalRead(endstop_bottom_sensor) == LOW) {
            Serial.println("\t\t\tSENSOR: bottom sensor activated");
            while(1) {}
      }
   }
   stepperA_SUCKTION.setCurrentPosition(0);
}



void takeCard_sucktion() {
    Serial.println("\t\tSucktion activating");
    for (pos = 0; pos <= 120; pos += 1) { // goes from 0 degrees to 180 degrees
      // in steps of 1 degree
      servo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15ms for the servo to reach the position
    }
    Serial.println("\t\tSucktion complete");
}

void dropCard_releaseSucktion() {
  Serial.println("\t\tRelease sucktion activated");
  for (pos = 120; pos != 0; pos -= 1) { // goes from 0 degrees to 180 degrees
      // in steps of 1 degree
      servo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15ms for the servo to reach the position  
  }
  Serial.println("\t\tRelease sucktion complete");
}

void takeCard_liftWITHCARD() {
   Serial.println("\t\tLift");
   stepperA_SUCKTION.move(800);
   while (stepperA_SUCKTION.currentPosition() != 800) {
      stepperA_SUCKTION.run();
      if (digitalRead(endstop_top_sensor) == LOW) {
            check = true;
            break;  
        } 
    }
   stepperA_SUCKTION.setCurrentPosition(0);   
}

void dropCard_liftNOCARD() {
   Serial.println("\t\tLift");
   stepperA_SUCKTION.move(400);
   while (stepperA_SUCKTION.currentPosition() != 400) {
      stepperA_SUCKTION.run();
      if (digitalRead(endstop_top_sensor) == LOW) {
            check = true;
            break;  
        } 
    }
    stepperA_SUCKTION.setCurrentPosition(0);  
}

int calculateChangePosition(String inputDestination[2]) {

  int tmpHolder;
  float amountOfSteps;
  int distance; 

  distance = inputDestination[1].toInt() - currentPlacement[1].toInt();

  Serial.println("\t\tCalculating Movement:");
  Serial.print("\t\tDestination: [");
  Serial.print(inputDestination[0]);
  Serial.print("|");
  Serial.print(inputDestination[1]);
  Serial.print("]");
  Serial.print("\t\tCurrent Placement: [");
  Serial.print(currentPlacement[0]);
  Serial.print("|");
  Serial.print(currentPlacement[1]);
  Serial.println("]");
  Serial.print("\t\tDistance: [");
  Serial.print(distance);
  Serial.println("]");

  if (distance < 0) {
    tmpHolder = -(distance);
  } else {
    tmpHolder = distance;
  }

  amountOfSteps = discPositionSteps[tmpHolder - 1];

  if (distance < 0) {
    amountOfSteps = amountOfSteps * -1;
  }
  
  Serial.print("\t\tCalculating Movement: Returning amount of steps: [");
  Serial.print(amountOfSteps);
  Serial.println("]");

  for (int i = 0; i < 2; i++) {
    currentPlacement[i] = inputDestination[i];
  }
  
  return amountOfSteps;
}

void motorChangePosition(int amountOfSteps) {
  stepperZ_BOTTOM.move(amountOfSteps);
    while (stepperZ_BOTTOM.currentPosition() != amountOfSteps) {
      stepperZ_BOTTOM.run();
    }  
    
    stepperZ_BOTTOM.setCurrentPosition(0);          
}